import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSlider;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
 
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Collections;
import java.util.List;
import java.util.Random;

/**
 * User Interface for the BeerMe Application
 * 
 * @author 		Jeff Wheadon
 * @version 	1.1
 * @date		April 11, 2016
 * @file		BeerMeGUI.java
 */

public class BeerMeGUI extends JFrame 
{

	// *****************************************************************
	// *  Fields
	// *****************************************************************
	
	private static Discover discover;	// declared in main in try-catch
	private static Profile profile;		//
	
	//***** Beer Recommendation on Discover Page
	private static BeerDisplay beer1 = new BeerDisplay();
	private static BeerDisplay beer2 = new BeerDisplay();
	private static BeerDisplay beer3 = new BeerDisplay();
	private static BeerDisplay beer4 = new BeerDisplay();
	private static BeerDisplay beer5 = new BeerDisplay();
	private static BeerDisplay beer6 = new BeerDisplay();
	
	private JPanel mainPanel = new JPanel();
	
	//** Menu Bar (North section of mainPanel)
	private JLabel menuBar = new JLabel();
	private JLabel beerMeLogo = new JLabel("BeerMe");
	private JPanel navButtonPanel = new JPanel();
	private JButton discoverTab = new JButton();
	private JButton onTapTab = new JButton();
	private JButton profileTab = new JButton();
	
	//** Pages (Center section of mainPanel)
	private JPanel pages = new JPanel();
	
	//* Discover Page
	private JPanel discoverPage = new JPanel();
	private JPanel topBar = new JPanel(); //Card layout for searching/filtering
	
	//Search Bar
	private JPanel searchBar = new JPanel();
	private JButton filterButtonOff = new JButton();
	private JPanel searchPanelBag = new JPanel();
	private JPanel searchPanel = new JPanel();
	private JTextField searchField = new JTextField("Search By Name", 40);
	private JButton submitSearch = new JButton("Submit");
	
	//FilterBar
	private JPanel filterBar = new JPanel();
	private JButton filterButtonOn = new JButton();
	
	private JPanel sliderPanel = new JPanel();
	
	private JPanel bitternessPanel = new JPanel();
	private JSlider bitternessSlider = new JSlider(SwingConstants.VERTICAL, 1, 10, 5);
	private JLabel bitternessLabel = new JLabel("Bitterness");
	
	private JPanel flavorPanel = new JPanel();
	private JSlider flavorSlider = new JSlider(SwingConstants.VERTICAL, 1, 10, 5);
	private JLabel flavorLabel = new JLabel("Flavor");
	
	private JPanel aromaPanel = new JPanel();
	private JSlider aromaSlider = new JSlider(SwingConstants.VERTICAL, 1, 10, 5);
	private JLabel aromaLabel = new JLabel("Aroma");
	
	private JPanel colorPanel = new JPanel();
	private JSlider colorSlider = new JSlider(SwingConstants.VERTICAL, 1, 10, 5);
	private JLabel colorLabel = new JLabel("Color");
	
	private JPanel abvPanel = new JPanel();
	private JSlider abvSlider = new JSlider(SwingConstants.VERTICAL, 1, 10, 5);
	private JLabel abvLabel = new JLabel("ABV");
	
	//Beer Recommendation List
	private JPanel beerReccs = new JPanel();
	
		
	//* On Tap Page
	private static JPanel onTapPage = new JPanel();
	private static JPanel onTapFullPage = new JPanel();
	private static JLabel onTapTitle = new JLabel("On Tap");
	private static JPanel onTapList = new JPanel();
	
	
	//* Profile Page
	private static JPanel profilePage = new JPanel();
	private static JPanel profileFullPage = new JPanel();
	private static JPanel profilePageTop = new JPanel();
	private static JLabel profileTitle = new JLabel("Your Profile");
	
	private static JPanel userPrefPanel = new JPanel();
	private JPanel bitterness = new JPanel();
	private JLabel bitterScale = new JLabel();
	private JLabel bitterLabel = new JLabel("Bitterness");
	private JLabel beerPic = new JLabel();
	private JPanel abv = new JPanel();
	private JLabel percentage = new JLabel();
	private JLabel userAbvLabel = new JLabel("ABV");
	
	private static JPanel feedbackPanel = new JPanel();
	private static JPanel toggleButtons = new JPanel();
	private static JButton likeButton = new JButton("Likes");
	private static JButton dislikeButton = new JButton("Dislikes");
	
	private static JPanel togglePanel = new JPanel();
	private static JPanel likesList = new JPanel();
	private static JPanel dislikesList = new JPanel();
	
	
	
	

	// *****************************************************************
	// *  Constructor
	// *****************************************************************	
	public BeerMeGUI() {
		super("BeerMe");
		
		//Initial Frame Setup
		setSize(700,500);
		setLocationRelativeTo(null);
		setResizable(false);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		addWindowListener( new WindowAdapter() {
            public void windowClosing(WindowEvent we) {
                try {
					Profile.saveAndQuit();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        } );
        
		
		//Main Panel Setup
		mainPanel.setLayout(new BorderLayout());
		
		
		//** Menu Bar (North section of mainPanel)
		menuBar.setLayout(new BorderLayout());
		menuBar.setIcon(new ImageIcon("bin/MenuBarBackground.png"));
		
		//Logo
		Font logoFont = beerMeLogo.getFont();
		beerMeLogo.setFont(new Font(logoFont.getName(), Font.PLAIN, 50));
		beerMeLogo.setBorder(new EmptyBorder(0,10,0,0));
		beerMeLogo.setForeground(Color.white);
		menuBar.add(beerMeLogo, BorderLayout.WEST);
		
		//NavButtonPanel
		navButtonPanel.setLayout(new FlowLayout());
		navButtonPanel.setOpaque(false);

		//Discover Tab
		discoverTab.setIcon(new ImageIcon("bin/DiscoverButton.png"));
		discoverTab.setBorder(new EmptyBorder(0,0,0,10));
		discoverTab.setContentAreaFilled(false);
		discoverTab.setCursor(new Cursor(Cursor.HAND_CURSOR));
		discoverTab.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		displayBeer(Profile.getPositiveAttributes(), Profile.getNegativeAttributes(), Profile.getOmits());
        		CardLayout cl = (CardLayout)(pages.getLayout());
    			cl.show(pages, "discoverPage");
        	}
        });
		navButtonPanel.add(discoverTab);
		
		//OnTap Tab
		onTapTab.setIcon(new ImageIcon("bin/MyTapButton.png"));
		onTapTab.setBorder(new EmptyBorder(0,10,0,10));
		onTapTab.setContentAreaFilled(false);
		onTapTab.setCursor(new Cursor(Cursor.HAND_CURSOR));
		onTapTab.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		CardLayout cl = (CardLayout)(pages.getLayout());
    			cl.show(pages, "onTapPage");
        	}
        });
		navButtonPanel.add(onTapTab);
		
		//Profile Tab
		profileTab.setIcon(new ImageIcon("bin/ProfileButton.png"));
		profileTab.setBorder(new EmptyBorder(0,10,0,10));
		profileTab.setContentAreaFilled(false);
		profileTab.setCursor(new Cursor(Cursor.HAND_CURSOR));
		profileTab.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		CardLayout cl = (CardLayout)(pages.getLayout());
    			cl.show(pages, "profilePage");
        	}
        });
		navButtonPanel.add(profileTab);
		
		menuBar.add(navButtonPanel, BorderLayout.EAST); //adds navButtonPanel to menuBar

		mainPanel.add(menuBar, BorderLayout.NORTH); //Add menu bar to mainPanel
		
		
		
		//** Pages (Center section of mainPanel)
		pages.setLayout(new CardLayout());	
		
		//* Discover Page
		discoverPage.setLayout(new BorderLayout());
		discoverPage.setBackground(new Color(250,243,230));
		topBar.setLayout(new CardLayout());
		topBar.setOpaque(false);
		topBar.setPreferredSize(new Dimension(700,110));
		topBar.setBorder(new EmptyBorder(0,10,0,10));
		
		//Search Bar
		searchBar.setLayout(new BorderLayout());
		searchBar.setOpaque(false);
		filterButtonOff.setIcon(new ImageIcon("bin/filterButtonOff.png"));
		filterButtonOff.setBorder(new EmptyBorder(0,10,0,0));
		filterButtonOff.setContentAreaFilled(false);
		filterButtonOff.setCursor(new Cursor(Cursor.HAND_CURSOR));
		filterButtonOff.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		int[] posAttr = Profile.getPositiveAttributes();
        		
        		bitternessSlider.setValue(posAttr[0]);
        		flavorSlider.setValue(posAttr[1]);
        		aromaSlider.setValue(posAttr[2]);
        		colorSlider.setValue(posAttr[3]);
        		abvSlider.setValue(posAttr[4]);
        		
        		CardLayout cl = (CardLayout)(topBar.getLayout());
    			cl.show(topBar, "filterBar");
        	}
        });
		searchBar.add(filterButtonOff, BorderLayout.WEST);
		
		searchPanelBag.setLayout(new GridBagLayout());
		searchPanelBag.setOpaque(false);
		searchPanel.setLayout(new FlowLayout());
		searchPanel.setOpaque(false);
		searchField.addMouseListener(new MouseAdapter(){
            public void mouseClicked(MouseEvent e){
            	if((searchField.getText()).equals("Search By Name")) searchField.setText("");             
            }
        });
		searchField.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {   
        		searchByName(searchField.getText());
        	}
        });
		searchPanel.add(searchField);
		submitSearch.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {   
        		searchByName(searchField.getText());
        	}
        });
		searchPanel.add(submitSearch);
		searchPanelBag.add(searchPanel);
		searchBar.add(searchPanelBag, BorderLayout.EAST);
		
		topBar.add(searchBar, "searchBar"); //adds searchBar to topBar
		
		//Filter Bar
		filterBar.setLayout(new BorderLayout());
		filterBar.setOpaque(false);
		filterButtonOn.setIcon(new ImageIcon("bin/filterButtonOn.png"));
		filterButtonOn.setBorder(new EmptyBorder(0,10,0,0));
		filterButtonOn.setContentAreaFilled(false);
		filterButtonOn.setCursor(new Cursor(Cursor.HAND_CURSOR));
		filterButtonOn.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {   
        		displayBeer(Profile.getPositiveAttributes(), Profile.getNegativeAttributes(), Profile.getOmits());
        		CardLayout cl = (CardLayout)(topBar.getLayout());
    			cl.show(topBar, "searchBar");
        	}
        });
		filterBar.add(filterButtonOn, BorderLayout.WEST);
		
		//Sliders
		sliderPanel.setLayout(new FlowLayout());
		sliderPanel.setOpaque(false);
		sliderPanel.setBorder(new EmptyBorder(0,0,0,40));
		
		bitternessPanel.setLayout(new BorderLayout());
		bitternessPanel.setOpaque(false);
		bitternessPanel.setPreferredSize(new Dimension(100,100));
		bitternessPanel.add(bitternessSlider, BorderLayout.CENTER);
		bitternessLabel.setHorizontalAlignment(JLabel.CENTER);
		bitternessPanel.add(bitternessLabel, BorderLayout.SOUTH);
		bitternessSlider.addChangeListener(new ChangeListener() {
		      public void stateChanged(ChangeEvent e) {
		          autoAdjustBeers();
		        }
		      });
		sliderPanel.add(bitternessPanel);
		
		flavorPanel.setLayout(new BorderLayout());
		flavorPanel.setOpaque(false);
		flavorPanel.setPreferredSize(new Dimension(100,100));
		flavorPanel.add(flavorSlider, BorderLayout.CENTER);
		flavorLabel.setHorizontalAlignment(JLabel.CENTER);
		flavorPanel.add(flavorLabel, BorderLayout.SOUTH);
		flavorSlider.addChangeListener(new ChangeListener() {
		      public void stateChanged(ChangeEvent e) {
		          autoAdjustBeers();
		        }
		      });
		sliderPanel.add(flavorPanel);
		
		aromaPanel.setLayout(new BorderLayout());
		aromaPanel.setOpaque(false);
		aromaPanel.setPreferredSize(new Dimension(100,100));
		aromaPanel.add(aromaSlider, BorderLayout.CENTER);
		aromaLabel.setHorizontalAlignment(JLabel.CENTER);
		aromaPanel.add(aromaLabel, BorderLayout.SOUTH);
		aromaSlider.addChangeListener(new ChangeListener() {
		      public void stateChanged(ChangeEvent e) {
		          autoAdjustBeers();
		        }
		      });
		sliderPanel.add(aromaPanel);
		
		colorPanel.setLayout(new BorderLayout());
		colorPanel.setOpaque(false);
		colorPanel.setPreferredSize(new Dimension(100,100));
		colorPanel.add(colorSlider, BorderLayout.CENTER);
		colorLabel.setHorizontalAlignment(JLabel.CENTER);
		colorPanel.add(colorLabel, BorderLayout.SOUTH);
		colorSlider.addChangeListener(new ChangeListener() {
		      public void stateChanged(ChangeEvent e) {
		          autoAdjustBeers();
		        }
		      });
		sliderPanel.add(colorPanel);
		
		abvPanel.setLayout(new BorderLayout());
		abvPanel.setOpaque(false);
		abvPanel.setPreferredSize(new Dimension(100,100));
		abvPanel.add(abvSlider, BorderLayout.CENTER);
		abvLabel.setHorizontalAlignment(JLabel.CENTER);
		abvPanel.add(abvLabel, BorderLayout.SOUTH);
		abvSlider.addChangeListener(new ChangeListener() {
		      public void stateChanged(ChangeEvent e) {
		          autoAdjustBeers();
		        }
		      });
		sliderPanel.add(abvPanel);
		
		filterBar.add(sliderPanel, BorderLayout.EAST);
		
		topBar.add(filterBar, "filterBar"); //adds filterBar to topBar
		
		discoverPage.add(topBar,BorderLayout.NORTH);
		
		beerReccs.setLayout(new FlowLayout());
		beerReccs.setOpaque(false);
		
		
		beerReccs.add(beer1);
		beerReccs.add(beer2);
		beerReccs.add(beer3);
		beerReccs.add(beer4);
		beerReccs.add(beer5);
		beerReccs.add(beer6);
		discoverPage.add(beerReccs, BorderLayout.CENTER);	
		
		pages.add(discoverPage, "discoverPage"); //adds discoverPage to pages
		
		
		
		
		//* On Tap Page
		onTapPage.setLayout(new BorderLayout());
		onTapPage.setBackground(new Color(250,243,230));
		
		onTapFullPage.setLayout(new BorderLayout());
		onTapFullPage.setPreferredSize(new Dimension(700,2000));
		onTapFullPage.setOpaque(false);
		
		//On Tap Title
		Font tapFont = onTapTitle.getFont();
		onTapTitle.setFont(new Font(tapFont.getName(), Font.PLAIN, 50));
		onTapTitle.setBorder(new EmptyBorder(20,0,20,0));
		onTapTitle.setHorizontalAlignment(JLabel.CENTER);
		onTapFullPage.add(onTapTitle, BorderLayout.NORTH);
		
		//On Tap List
		onTapList.setLayout(new FlowLayout());
		//onTapList.setPreferredSize(new Dimension(700,1000));
		onTapList.setOpaque(false);
		
		loadOnTapList();
		
		onTapFullPage.add(onTapList, BorderLayout.CENTER);
		
		
		JScrollPane listScrollPane = new JScrollPane(onTapFullPage,
				JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        listScrollPane.setSize(new Dimension(700,0)); //Sets the width of scroll pane
        listScrollPane.setBorder(new EmptyBorder(0,0,0,0));
        listScrollPane.getViewport().setOpaque(false);
        listScrollPane.setOpaque(false);
        	
		onTapPage.add(listScrollPane, BorderLayout.CENTER);
			
		pages.add(onTapPage, "onTapPage"); //adds onTapPage to pages
		
		
		
		
		//* Profile Page
		profilePage.setLayout(new BorderLayout());
		profilePage.setBackground(new Color(250,243,230));
		
		profileFullPage.setLayout(new BorderLayout());
		profileFullPage.setPreferredSize(new Dimension(700,2000));
		profileFullPage.setOpaque(false);
		
		//*Top of profile page (Title and User Prefs)
		profilePageTop.setLayout(new BorderLayout());
		profilePageTop.setOpaque(false);
		
		//Profile Title
		Font profileFont = profileTitle.getFont();
		profileTitle.setFont(new Font(tapFont.getName(), Font.PLAIN, 50));
		profileTitle.setBorder(new EmptyBorder(20,0,20,0));
		profileTitle.setHorizontalAlignment(JLabel.CENTER);
		profilePageTop.add(profileTitle, BorderLayout.NORTH);
		
		
		//User Preferences
		userPrefPanel.setLayout(new BorderLayout());
		userPrefPanel.setBorder(new EmptyBorder(5,50,30,55));
		userPrefPanel.setOpaque(false);
		
		abv.setLayout(new BorderLayout());
		abv.setBorder(new EmptyBorder(0,0,0,10));
		abv.setOpaque(false);		
		Font percentageFont = percentage.getFont();
		percentage.setFont(new Font(percentageFont.getName(), Font.PLAIN, 16));
		percentage.setHorizontalAlignment(JLabel.CENTER);
		abv.add(percentage,BorderLayout.CENTER);		
		Font abvLabelFont = userAbvLabel.getFont();
		userAbvLabel.setFont(new Font(abvLabelFont.getName(), Font.PLAIN, 8));
		userAbvLabel.setHorizontalAlignment(JLabel.CENTER);
		abv.add(userAbvLabel,BorderLayout.SOUTH);	
		userPrefPanel.add(abv,BorderLayout.EAST);
		
		beerPic.setIcon(new ImageIcon("bin/1big.png"));
		beerPic.setHorizontalAlignment(JLabel.CENTER);
		beerPic.setBorder(new EmptyBorder(5,0,0,0));
		userPrefPanel.add(beerPic,BorderLayout.CENTER);
		
		bitterness.setLayout(new BorderLayout());
		bitterness.setBorder(new EmptyBorder(0,10,0,0));
		bitterness.setOpaque(false);
		Font bitterScaleFont = bitterScale.getFont();
		bitterScale.setFont(new Font(bitterScaleFont.getName(), Font.PLAIN, 16));
		bitterScale.setHorizontalAlignment(JLabel.CENTER);
		bitterness.add(bitterScale, BorderLayout.CENTER);	
		Font bitterLabelFont = bitterLabel.getFont();
		bitterLabel.setFont(new Font(bitterLabelFont.getName(), Font.PLAIN, 8));
		bitterLabel.setHorizontalAlignment(JLabel.CENTER);
		bitterness.add(bitterLabel,BorderLayout.SOUTH);
		userPrefPanel.add(bitterness,BorderLayout.WEST);	
		
		profilePageTop.add(userPrefPanel,BorderLayout.CENTER);
		
		
		profileFullPage.add(profilePageTop, BorderLayout.NORTH);
		
		//*Feedback Panel
		feedbackPanel.setLayout(new BorderLayout());
		feedbackPanel.setOpaque(false);
		
		//Toggle Button Panel
		toggleButtons.setLayout(new FlowLayout());
		toggleButtons.setOpaque(false);
		
		likeButton.setPreferredSize(new Dimension(300,75));
		likeButton.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {   		
        		CardLayout cl = (CardLayout)(togglePanel.getLayout());
    			cl.show(togglePanel, "likes");
        	}
        });
		toggleButtons.add(likeButton);
		dislikeButton.setPreferredSize(new Dimension(300,75));
		dislikeButton.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {   		
        		CardLayout cl = (CardLayout)(togglePanel.getLayout());
    			cl.show(togglePanel, "dislikes");
        	}
        });
		toggleButtons.add(dislikeButton);
		
		feedbackPanel.add(toggleButtons, BorderLayout.NORTH);
		
		//Toggle Panel Card Layout
		togglePanel.setLayout(new CardLayout());
		togglePanel.setOpaque(false);
		
		likesList.setLayout(new FlowLayout());
		likesList.setOpaque(false);
		loadLikesList();
		togglePanel.add(likesList, "likes");
		
		dislikesList.setLayout(new FlowLayout());
		dislikesList.setOpaque(false);
		loadDislikesList();
		togglePanel.add(dislikesList, "dislikes");
		
		feedbackPanel.add(togglePanel, BorderLayout.CENTER);
		
		
		profileFullPage.add(feedbackPanel, BorderLayout.CENTER);
		
		JScrollPane profileScrollPane = new JScrollPane(profileFullPage,
				JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		profileScrollPane.setSize(new Dimension(700,0)); //Sets the width of scroll pane
		profileScrollPane.setBorder(new EmptyBorder(0,0,0,0));
		profileScrollPane.getViewport().setOpaque(false);
		profileScrollPane.setOpaque(false);
        
		profilePage.add(profileScrollPane, BorderLayout.CENTER);
		
		
		
		pages.add(profilePage, "profilePage"); //add profile Page to pages
		
		
		mainPanel.add(pages, BorderLayout.CENTER);
		
		
		add(mainPanel);	//adds mainPanel to the frame
		setVisible(true); //makes the frame visible
		
	} //end constructor
	
	
	// *****************************************************************
	// *  Main
	// *****************************************************************	
	public static void main(String[] args){
		try{
			discover = new Discover();
			profile = new Profile();
		} catch(FileNotFoundException e){
			System.out.println("Failed");
		}
		
		new BeerMeGUI();
		displayBeer(Profile.getPositiveAttributes(), Profile.getNegativeAttributes(), Profile.getOmits());
		//System.out.println(Discover.findBeers(Profile.getPositiveAttributes(), Profile.getNegativeAttributes(), Profile.getOmits()).length);
	}
	
	
	
	// *****************************************************************
	// *  Methods
	// *****************************************************************
	
	public static void displayBeer(int[] pos, int[] neg, Beer[] omits){
		Beer[] beers = Discover.findBeers(pos, neg, omits);	
		Random rand = new Random();
		
		System.out.println(beers.length);
	
		int random1;
		int random2;
		int random3;
		int random4;
		int random5;
		int random6;
		
		//Generates 6 UNIQUE random numbers
		if(beers.length >= 1){
			random1 = rand.nextInt(beers.length);
			beer1.setBeer(beers[random1]);
			if(beers.length >= 2){
				do {
					random2 = rand.nextInt(beers.length);
				} while(random2 == random1);
				beer2.setBeer(beers[random2]);
				if(beers.length >= 3){
					do {
						random3 = rand.nextInt(beers.length);
					} while(random3 == random1 || random3 == random2);
					beer3.setBeer(beers[random3]);
					if(beers.length >= 4){
						do {
							random4 = rand.nextInt(beers.length);
						} while(random4 == random1 || random4 == random2 || random4 == random3);
						beer4.setBeer(beers[random4]);
						if(beers.length >= 5){
							do {
								random5 = rand.nextInt(beers.length);
							} while(random5 == random1 || random5 == random2 || random5 == random3
									|| random5 == random4);
							beer5.setBeer(beers[random5]);
							if(beers.length >= 6){
								do {
									random6 = rand.nextInt(beers.length);
								} while(random6 == random1 || random6 == random2 || random6 == random3
										|| random6 == random4 || random6 == random5);
								beer6.setBeer(beers[random6]);
							}
						}						
					}
				}
			}
		}
		
	}
	
	public static void searchByName(String beerName){
		Beer[] beers = Discover.search(beerName);	
		Random rand = new Random();
		
		System.out.println(beers.length);
	
		int random1;
		int random2;
		int random3;
		int random4;
		int random5;
		int random6;
		
		//Generates 6 UNIQUE random numbers
		if(beers.length >= 1){
			random1 = rand.nextInt(beers.length);
			beer1.setBeer(beers[random1]);
			if(beers.length >= 2){
				do {
					random2 = rand.nextInt(beers.length);
				} while(random2 == random1);
				beer2.setBeer(beers[random2]);
				if(beers.length >= 3){
					do {
						random3 = rand.nextInt(beers.length);
					} while(random3 == random1 || random3 == random2);
					beer3.setBeer(beers[random3]);
					if(beers.length >= 4){
						do {
							random4 = rand.nextInt(beers.length);
						} while(random4 == random1 || random4 == random2 || random4 == random3);
						beer4.setBeer(beers[random4]);
						if(beers.length >= 5){
							do {
								random5 = rand.nextInt(beers.length);
							} while(random5 == random1 || random5 == random2 || random5 == random3
									|| random5 == random4);
							beer5.setBeer(beers[random5]);
							if(beers.length >= 6){
								do {
									random6 = rand.nextInt(beers.length);
								} while(random6 == random1 || random6 == random2 || random6 == random3
										|| random6 == random4 || random6 == random5);
								beer6.setBeer(beers[random6]);
							}
						}						
					}
				}
			}
		}
	}
	
	public void autoAdjustBeers(){
		int bitterness = bitternessSlider.getValue();
		int flavor = flavorSlider.getValue();
		int aroma = aromaSlider.getValue();
		int color = colorSlider.getValue();
		int abv = abvSlider.getValue();
		
		int[] posAttr = {bitterness, flavor, aroma, color, abv};
		int[] negAttr = {64,64,64,64,64};
		
		displayBeer(posAttr, negAttr, Profile.getOmits());
	}
	
	public static void loadOnTapList(){
		onTapFullPage.repaint();
		onTapList.removeAll();
		onTapList.repaint();
		onTapList.revalidate();
		
		Beer[] onTap = Profile.getOnTap();		
		for(int i=0; i<onTap.length; i++){
			BeerDisplay beer = new BeerDisplay();
			beer.setBeer(onTap[i]);
			onTapList.add(beer);
		}

	}
	
	public static void loadProfilePrefs(){
		
	}
	
	public static void loadLikesList(){
		profileFullPage.repaint();
		likesList.removeAll();
		likesList.repaint();
		likesList.revalidate();
		
		Beer[] likes = Profile.getLikes();
		for(int i=0; i<likes.length; i++){
			BeerDisplay beer = new BeerDisplay();
			beer.setBeer(likes[i]);
			likesList.add(beer);
		}
		
	}
	
	public static void loadDislikesList(){
		profileFullPage.repaint();
		dislikesList.removeAll();
		dislikesList.repaint();
		dislikesList.revalidate();
		
		Beer[] dislikes = Profile.getDislikes();
		for(int i=0; i<dislikes.length; i++){
			BeerDisplay beer = new BeerDisplay();
			beer.setBeer(dislikes[i]);
			dislikesList.add(beer);
		}
		
	}


	
}
